{"version":3,"sources":["../../../../../src/components/month/calendarOpenDayEvents.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EAEb,MAAM,eAAA,CAAgB;AACvB,OAAO,EACL,OAAO,EACP,KAAK,EACL,UAAU,EACV,OAAO,EACR,MAAM,qBAAA,CAAsB;AAI7B;IAAA;QAEG,WAAM,GAAY,KAAK,CAAC;QAMxB,iBAAY,GAAyC,IAAI,YAAY,EAA0B,CAAC;IA0DnG,CAAC;IAAD,qCAAC;AAAD,CAlEA,AAkEC;;AAxDM,yCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,8BAA8B;gBACxC,QAAQ,EAAE,m+BA6BT;gBACD,UAAU,EAAE;oBACV,OAAO,CAAC,UAAU,EAAE;wBAClB,UAAU,CAAC,WAAW,EAAE;4BACtB,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC;4BAClB,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,EAAC,MAAM,EAAE,GAAG,EAAC,CAAC,CAAC;yBAC9C,CAAC;wBACF,UAAU,CAAC,WAAW,EAAE;4BACtB,KAAK,CAAC,EAAC,MAAM,EAAE,GAAG,EAAC,CAAC;4BACpB,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;yBAC5C,CAAC;qBACH,CAAC;iBACH;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,6CAAc,GAA2C;IAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACpC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAClC,CAAC","file":"calendarOpenDayEvents.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport {\n  trigger,\n  style,\n  transition,\n  animate\n} from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\n\n\nexport class CalendarOpenDayEventsComponent {\n\n   isOpen: boolean = false;\n\n   events: CalendarEvent[];\n\n   customTemplate: TemplateRef<any>;\n\n   eventClicked: EventEmitter<{event: CalendarEvent}> = new EventEmitter<{event: CalendarEvent}>();\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mwl-calendar-open-day-events',\n  template: `\n    <ng-template #defaultTemplate>\n      <div\n        *ngFor=\"let event of events\"\n        [ngClass]=\"event?.cssClass\"\n        mwlDraggable\n        [dropData]=\"{event: event}\"\n        [dragAxis]=\"{x: event.draggable, y: event.draggable}\">\n        <span\n          class=\"cal-event\"\n          [style.backgroundColor]=\"event.color.primary\">\n        </span>\n        <mwl-calendar-event-title\n          [event]=\"event\"\n          view=\"month\"\n          (click)=\"eventClicked.emit({event: event})\">\n        </mwl-calendar-event-title>\n        <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n      </div>\n    </ng-template>\n    <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\n      <ng-template\n        [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n        [ngTemplateOutletContext]=\"{\n          events: events,\n          eventClicked: eventClicked\n        }\">\n      </ng-template>\n    </div>\n  `,\n  animations: [\n    trigger('collapse', [\n      transition('void => *', [\n        style({height: 0}),\n        animate('150ms linear', style({height: '*'}))\n      ]),\n      transition('* => void', [\n        style({height: '*'}),\n        animate('150ms linear', style({height: 0}))\n      ])\n    ])\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'isOpen': [{ type: Input },],\n'events': [{ type: Input },],\n'customTemplate': [{ type: Input },],\n'eventClicked': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}