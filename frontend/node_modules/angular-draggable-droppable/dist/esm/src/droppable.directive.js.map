{"version":3,"sources":["../../../src/droppable.directive.ts"],"names":[],"mappings":"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","file":"droppable.directive.js","sourceRoot":"","sourcesContent":["import {Directive, OnInit, ElementRef, OnDestroy, Output, EventEmitter, NgZone} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/pairwise';\nimport 'rxjs/add/operator/filter';\nimport {DraggableHelper} from './draggableHelper.provider';\n\nfunction isCoordinateWithinRectangle(clientX: number, clientY: number, rect: ClientRect): boolean {\n  return clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;\n}\n\nexport type DropData = {dropData: any};\n\n\nexport class Droppable implements OnInit, OnDestroy {\n\n   dragEnter: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n   dragLeave: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n   dragOver: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n   drop: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n  currentDragSubscription: Subscription;\n\n  constructor(private element: ElementRef, private draggableHelper: DraggableHelper, private zone: NgZone) {}\n\n  ngOnInit(): void {\n\n    interface CurrentDragData {\n      clientX: number;\n      clientY: number;\n      dropData: any;\n    }\n\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe((drag: Subject<CurrentDragData>) => {\n\n      const droppableRectangle: ClientRect = this.element.nativeElement.getBoundingClientRect();\n\n      let currentDragDropData: any;\n      const overlaps: Observable<boolean> = drag.map(({clientX, clientY, dropData}) => {\n        currentDragDropData = dropData;\n        return isCoordinateWithinRectangle(clientX, clientY, droppableRectangle);\n      });\n\n      const overlapsChanged: Observable<boolean> = overlaps.distinctUntilChanged();\n\n      let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n      overlapsChanged.filter(overlapsNow => overlapsNow).subscribe(() => {\n        dragOverActive = true;\n        this.zone.run(() => {\n          this.dragEnter.next({\n            dropData: currentDragDropData\n          });\n        });\n      });\n\n      overlaps.filter(overlapsNow => overlapsNow).subscribe(() => {\n        this.zone.run(() => {\n          this.dragOver.next({\n            dropData: currentDragDropData\n          });\n        });\n      });\n\n      overlapsChanged\n        .pairwise()\n        .filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n        .subscribe(() => {\n          dragOverActive = false;\n          this.zone.run(() => {\n            this.dragLeave.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n      drag.flatMap(() => overlaps).subscribe({\n        complete: () => {\n          if (dragOverActive) {\n            this.zone.run(() => {\n              this.drop.next({\n                dropData: currentDragDropData\n              });\n            });\n          }\n        }\n      });\n\n    });\n\n  }\n\n  ngOnDestroy(): void {\n    this.currentDragSubscription.unsubscribe();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlDroppable]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: DraggableHelper, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dragEnter': [{ type: Output },],\n'dragLeave': [{ type: Output },],\n'dragOver': [{ type: Output },],\n'drop': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}