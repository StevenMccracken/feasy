{"version":3,"file":"calendarOpenDayEvents.component.js","sourceRoot":"","sources":["../../../../../src/components/month/calendarOpenDayEvents.component.ts"],"names":[],"mappings":"OAAO,EACL,SAAS,EACT,KAAK,EACL,OAAO,EACP,KAAK,EACL,UAAU,EACV,OAAO,EACP,MAAM,EACN,YAAY,EACb,MAAM,eAAe;AAItB;IAAA;QAEG,WAAM,GAAY,KAAK,CAAC;QAIxB,iBAAY,GAAyC,IAAI,YAAY,EAA0B,CAAC;IAgDnG,CAAC;IA9CM,yCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,8BAA8B;oBACxC,QAAQ,EAAE,ysBAoBT;oBACD,UAAU,EAAE;wBACV,OAAO,CAAC,UAAU,EAAE;4BAClB,UAAU,CAAC,WAAW,EAAE;gCACtB,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC;gCAClB,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,EAAC,MAAM,EAAE,GAAG,EAAC,CAAC,CAAC;6BAC9C,CAAC;4BACF,UAAU,CAAC,WAAW,EAAE;gCACtB,KAAK,CAAC,EAAC,MAAM,EAAE,GAAG,EAAC,CAAC;gCACpB,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;6BAC5C,CAAC;yBACH,CAAC;qBACH;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,6CAAc,GAA2C;QAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAClC,CAAC;IACF,qCAAC;AAAD,CAAC,AAtDD,IAsDC","sourcesContent":["import {\n  Component,\n  Input,\n  trigger,\n  style,\n  transition,\n  animate,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n\nexport class CalendarOpenDayEventsComponent {\n\n   isOpen: boolean = false;\n\n   events: CalendarEvent[];\n\n   eventClicked: EventEmitter<{event: CalendarEvent}> = new EventEmitter<{event: CalendarEvent}>();\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mwl-calendar-open-day-events',\n  template: `\n    <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\n      <div\n        *ngFor=\"let event of events\"\n        [ngClass]=\"event?.cssClass\"\n        mwlDraggable\n        [dropData]=\"{event: event}\"\n        [dragAxis]=\"{x: event.draggable, y: event.draggable}\">\n        <span\n          class=\"cal-event\"\n          [style.backgroundColor]=\"event.color.primary\">\n        </span>\n        <mwl-calendar-event-title\n          [event]=\"event\"\n          view=\"month\"\n          (click)=\"eventClicked.emit({event: event})\">\n        </mwl-calendar-event-title>\n        <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n      </div>\n    </div>\n  `,\n  animations: [\n    trigger('collapse', [\n      transition('void => *', [\n        style({height: 0}),\n        animate('150ms linear', style({height: '*'}))\n      ]),\n      transition('* => void', [\n        style({height: '*'}),\n        animate('150ms linear', style({height: 0}))\n      ])\n    ])\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'isOpen': [{ type: Input },],\n'events': [{ type: Input },],\n'eventClicked': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}