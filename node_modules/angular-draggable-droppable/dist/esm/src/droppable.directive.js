import { Directive, ElementRef, Output, EventEmitter } from '@angular/core';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/pairwise';
import 'rxjs/add/operator/filter';
import { DraggableHelper } from './draggableHelper.provider';
function isCoordinateWithinRectangle(clientX, clientY, rect) {
    return clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;
}
export var Droppable = (function () {
    function Droppable(element, draggableHelper) {
        this.element = element;
        this.draggableHelper = draggableHelper;
        this.dragEnter = new EventEmitter();
        this.dragLeave = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.drop = new EventEmitter();
    }
    Droppable.prototype.ngOnInit = function () {
        var _this = this;
        this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(function (drag) {
            var droppableRectangle = _this.element.nativeElement.getBoundingClientRect();
            var currentDragDropData;
            var overlaps = drag.map(function (_a) {
                var clientX = _a.clientX, clientY = _a.clientY, dropData = _a.dropData;
                currentDragDropData = dropData;
                return isCoordinateWithinRectangle(clientX, clientY, droppableRectangle);
            });
            var overlapsChanged = overlaps.distinctUntilChanged();
            var dragOverActive; // TODO - see if there's a way of doing this via rxjs
            overlapsChanged.filter(function (overlapsNow) { return overlapsNow; }).subscribe(function () {
                dragOverActive = true;
                _this.dragEnter.next({
                    dropData: currentDragDropData
                });
            });
            overlaps.filter(function (overlapsNow) { return overlapsNow; }).subscribe(function () {
                _this.dragOver.next({
                    dropData: currentDragDropData
                });
            });
            overlapsChanged
                .pairwise()
                .filter(function (_a) {
                var didOverlap = _a[0], overlapsNow = _a[1];
                return didOverlap && !overlapsNow;
            })
                .subscribe(function () {
                dragOverActive = false;
                _this.dragLeave.next({
                    dropData: currentDragDropData
                });
            });
            drag.flatMap(function () { return overlaps; }).subscribe({
                complete: function () {
                    if (dragOverActive) {
                        _this.drop.next({
                            dropData: currentDragDropData
                        });
                    }
                }
            });
        });
    };
    Droppable.prototype.ngOnDestroy = function () {
        this.currentDragSubscription.unsubscribe();
    };
    Droppable.decorators = [
        { type: Directive, args: [{
                    selector: '[mwlDroppable]'
                },] },
    ];
    /** @nocollapse */
    Droppable.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: DraggableHelper, },
    ]; };
    Droppable.propDecorators = {
        'dragEnter': [{ type: Output },],
        'dragLeave': [{ type: Output },],
        'dragOver': [{ type: Output },],
        'drop': [{ type: Output },],
    };
    return Droppable;
}());
//# sourceMappingURL=droppable.directive.js.map